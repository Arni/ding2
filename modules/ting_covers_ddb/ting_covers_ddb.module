<?php
/**
 * @file
 * Provide covers from the ADDI service.
 */

/**
 * Implements hook_menu().
 */
function ting_covers_ddb_menu() {
  $items = array();

  $items['admin/config/ting/covers/ddb'] = array(
    'title' => 'DDB CoverService',
    'description' => 'Configure integration with the DDB CoverService.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_covers_ddb_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/ting_covers_ddb.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_ding_provider_user().
 */
function ting_covers_ddb_ding_provider_user() {
  return array(
    'openplatform' => array(
      'required' => TRUE,
    ),
  );
}


/**
 * Implements hook_ting_covers().
 */
function ting_covers_ddb_ting_covers($entities) {
  $covers = array();

  try {
    $config = _ting_cover_ddb_get_clint_config();
    $apiInstance = new CoverService\Api\CoverApi(
      new GuzzleHttp\Client(),
      $config
    );
    $retrieved = $apiInstance->getCoverCollection('pid', array_keys($entities), array('original', 'large'));
  } catch (Exception $e) {
    watchdog('ting_covers_ddb', 'Unable to retrieve covers: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    return $covers;
  }

  foreach ($retrieved as $cover) {
    $source_url = $source_fallback_url = NULL;
    $image_urls = $cover->getImageUrls();
    foreach ($image_urls as $image_url) {
      switch ($image_url->getSize()) {
        case 'original':
          $source_url = $image_url->getUrl();
          break;

        case 'large':
          $source_fallback_url = $image_url->getUrl();
          break;
      }
    }

    if (is_null($source_url)) {
      // The service will return null for a given image size if there is no
      // image that is large enough to scale down to that size. So we fallback
      // to original image from the service.
      $source_url = $source_fallback_url;
    }

    // Return the path to the cover.
    $covers[$cover->getId()] = $source_url;
  }

  // Return all image information.
  return $covers;
}

/**
 * Helper to get configuration for the service.
 *
 * @return \CoverService\Configuration
 *   API client configuration.
 *
 * @throws \DingProviderDoesntImplement
 * @throws \DingProviderNoProvider
 */
function _ting_cover_ddb_get_clint_config() {
  $config = \CoverService\Configuration::getDefaultConfiguration();

  // Get access token for the library.
  $token = ding_provider_invoke('openplatform', 'get_agency_token');;
  $config->setAccessToken($token);

  $config->setHost(_ting_covers_ddb_get_url());

  return $config;
}

/**
 * Get the service URL.
 *
 * @return string
 *   The URL for the service if set else default service URL.
 */
function _ting_covers_ddb_get_url() {
  return variable_get('ting_covers_ddb_url', 'http://cover.dandigbib.org');
}
